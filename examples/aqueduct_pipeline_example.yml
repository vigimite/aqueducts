sources:
  - type: File
    name: jan_data
    file_type:
      type: Csv
      options:
        has_header: true
        delimiter: ","
    location: ${local_path}/examples/temp_readings_jan_2024.csv

  - type: File
    name: feb_data
    file_type:
      type: Csv
      options:
        has_header: true
        delimiter: ","
    location: ${local_path}/examples/temp_readings_feb_2024.csv

stages:
  - - name: jan_aggregated
      query: >
          SELECT
            cast(timestamp as date) date,
            location_id,
            round(min(temperature_c),2) min_temp_c,
            round(min(humidity),2) min_humidity,
            round(max(temperature_c),2) max_temp_c,
            round(max(humidity),2) max_humidity,
            round(avg(temperature_c),2) avg_temp_c,
            round(avg(humidity),2) avg_humidity
          FROM temp_readings
          GROUP by 1,2
          ORDER by 1 asc
      # print 20 rows of the result for this query to stdout
      show: 20 

    - name: feb_aggregated
      query: >
          SELECT
            cast(timestamp as date) date,
            location_id,
            round(min(temperature_c),2) min_temp_c,
            round(min(humidity),2) min_humidity,
            round(max(temperature_c),2) max_temp_c,
            round(max(humidity),2) max_humidity,
            round(avg(temperature_c),2) avg_temp_c,
            round(avg(humidity),2) avg_humidity
          FROM temp_readings
          GROUP by 1,2
          ORDER by 1 asc
      # print the entire result for this query to stdout
      show: 0

  - - name: union
      query: >
        SELECT * FROM jan_aggregated UNION (SELECT * FROM feb_aggregated)
      print_schema: true # print the resulting schema of this query to stdout

destination:
  type: Delta
  name: example_output
  location: ${local_path}/examples/output_delta_example/${run_id}
  storage_options: {}
  table_properties: {}

  # how to write this table
  # valid options are Append, Replace and Upsert
  write_mode:
    # upserts using the date as the "primary" key
    operation: Upsert
    params: 
      - date

  # columns by which to partition the table
  partition_cols:
    - date

  # table schema using de-serialization provided by `deltalake::kernel::StructField`
  schema:
    - name: date
      type: date
      nullable: true
      metadata: {}
    - name: location_id
      type: integer
      nullable: true
      metadata: {}
    - name: min_temp_c
      type: double
      nullable: true
      metadata: {}
    - name: min_humidity
      type: double
      nullable: true
      metadata: {}
    - name: max_temp_c
      type: double
      nullable: true
      metadata: {}
    - name: max_humidity
      type: double
      nullable: true
      metadata: {}
    - name: avg_temp_c
      type: double
      nullable: true
      metadata: {}
    - name: avg_humidity
      type: double
      nullable: true
      metadata: {}
