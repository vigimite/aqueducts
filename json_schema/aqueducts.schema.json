{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Aqueduct",
  "description": "Definition for an `Aqueduct` data pipeline.\n\nAn aqueduct defines a complete data processing pipeline with sources, transformation stages, and an optional destination. Most configuration uses sensible defaults to minimize verbosity.\n\n# Examples\n\n``` use aqueducts_schemas::{Aqueduct, Source, FileSource, SourceFileType, CsvSourceOptions, Stage};\n\n// Complete pipeline with defaults - version defaults to \"v2\" let pipeline = Aqueduct::builder() .sources(vec![ Source::File( FileSource::builder() .name(\"sales\".to_string()) .format(SourceFileType::Csv(CsvSourceOptions::default())) .location(\"./sales.csv\".try_into().unwrap()) .build() ) ]) .stages(vec![vec![ Stage::builder() .name(\"totals\".to_string()) .query(\"SELECT region, SUM(amount) as total FROM sales GROUP BY region\".to_string()) .build() ]]) .build(); ```",
  "type": "object",
  "required": [
    "sources",
    "stages"
  ],
  "properties": {
    "version": {
      "description": "Schema version for migration compatibility",
      "default": "v2",
      "type": "string"
    },
    "sources": {
      "description": "Definition of the data sources for this pipeline",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Source"
      }
    },
    "stages": {
      "description": "A sequential list of transformations to execute within the context of this pipeline Nested stages are executed in parallel",
      "type": "array",
      "items": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Stage"
        }
      }
    },
    "destination": {
      "description": "Destination for the final step of the `Aqueduct` takes the last stage as input for the write operation",
      "anyOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Source": {
      "description": "A data source for aqueducts pipelines.\n\nSources define where data is read from and include various formats and storage systems. Each source type has specific configuration options for its format and location.\n\n# Examples\n\n``` use aqueducts_schemas::{Source, FileSource, SourceFileType, CsvSourceOptions};\n\n// CSV file source - storage_config defaults to empty HashMap let csv_source = Source::File( FileSource::builder() .name(\"sales_data\".to_string()) .format(SourceFileType::Csv(CsvSourceOptions::default())) .location(\"./data/sales.csv\".try_into().unwrap()) .build() ); ```",
      "oneOf": [
        {
          "description": "An in-memory source",
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "in_memory"
              ]
            },
            "name": {
              "description": "Name of the in-memory table, existence will be checked at runtime",
              "type": "string"
            }
          }
        },
        {
          "description": "A file source",
          "type": "object",
          "required": [
            "format",
            "location",
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "file"
              ]
            },
            "name": {
              "description": "Name of the file source, will be the registered table name in the SQL context",
              "type": "string"
            },
            "format": {
              "description": "File format of the file to be ingested Supports `Parquet` for parquet files, `Csv` for CSV files and `Json` for JSON files",
              "allOf": [
                {
                  "$ref": "#/definitions/SourceFileType"
                }
              ]
            },
            "location": {
              "description": "A URL or Path to the location of the file Supports relative local paths",
              "allOf": [
                {
                  "$ref": "#/definitions/Location"
                }
              ]
            },
            "storage_config": {
              "description": "Storage configuration for the file Please reference the delta-rs github repo for more information on available keys (e.g. <https://github.com/delta-io/delta-rs/blob/main/crates/aws/src/storage.rs>) additionally also reference the `object_store` docs (e.g. <https://docs.rs/object_store/latest/object_store/aws/enum.AmazonS3ConfigKey.html>)",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        {
          "description": "A directory source",
          "type": "object",
          "required": [
            "format",
            "location",
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "directory"
              ]
            },
            "name": {
              "description": "Name of the directory source, will be the registered table name in the SQL context",
              "type": "string"
            },
            "format": {
              "description": "File format of the files to be ingested Supports `Parquet` for parquet files, `Csv` for CSV files and `Json` for JSON files",
              "allOf": [
                {
                  "$ref": "#/definitions/SourceFileType"
                }
              ]
            },
            "partition_columns": {
              "description": "Columns to partition the table by This is a list of key value tuples where the key is the column name and the value is a DataType",
              "default": [],
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/DataType"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "location": {
              "description": "A URL or Path to the location of the directory Supports relative local paths",
              "allOf": [
                {
                  "$ref": "#/definitions/Location"
                }
              ]
            },
            "storage_config": {
              "description": "Storage configuration for the directory Please reference the delta-rs github repo for more information on available keys (e.g. <https://github.com/delta-io/delta-rs/blob/main/crates/aws/src/storage.rs>) additionally also reference the `object_store` docs (e.g. <https://docs.rs/object_store/latest/object_store/aws/enum.AmazonS3ConfigKey.html>)",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        {
          "description": "An ODBC source",
          "type": "object",
          "required": [
            "connection_string",
            "load_query",
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "odbc"
              ]
            },
            "name": {
              "description": "Name of the ODBC source, will be the registered table name in the SQL context",
              "type": "string"
            },
            "load_query": {
              "description": "Query to execute when fetching data from the ODBC connection This query will execute eagerly before the data is processed by the pipeline Size of data returned from the query cannot exceed work memory",
              "type": "string"
            },
            "connection_string": {
              "description": "ODBC connection string Please reference the respective database connection string syntax (e.g. <https://www.connectionstrings.com/postgresql-odbc-driver-psqlodbc/>)",
              "type": "string"
            }
          }
        },
        {
          "description": "A delta table source",
          "type": "object",
          "required": [
            "location",
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "delta"
              ]
            },
            "name": {
              "description": "Name of the delta source, will be the registered table name in the SQL context",
              "type": "string"
            },
            "location": {
              "description": "A URL or Path to the location of the delta table Supports relative local paths",
              "allOf": [
                {
                  "$ref": "#/definitions/Location"
                }
              ]
            },
            "storage_config": {
              "description": "Storage configuration for the delta table Please reference the delta-rs github repo for more information on available keys (e.g. <https://github.com/delta-io/delta-rs/blob/main/crates/aws/src/storage.rs>) additionally also reference the `object_store` docs (e.g. <https://docs.rs/object_store/latest/object_store/aws/enum.AmazonS3ConfigKey.html>)",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "version": {
              "description": "Delta table version to read from When unspecified, will read the latest version",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "timestamp": {
              "description": "RFC3339 timestamp to read the delta table at When unspecified, will read the latest version",
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            }
          }
        }
      ]
    },
    "SourceFileType": {
      "description": "File type of the source file, supports `Parquet`, `Csv` or `Json`",
      "oneOf": [
        {
          "description": "Parquet source options",
          "type": "object",
          "required": [
            "options",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "parquet"
              ]
            },
            "options": {
              "$ref": "#/definitions/ParquetSourceOptions"
            }
          }
        },
        {
          "description": "Csv source options",
          "type": "object",
          "required": [
            "options",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "csv"
              ]
            },
            "options": {
              "$ref": "#/definitions/CsvSourceOptions"
            }
          }
        },
        {
          "description": "Json source options",
          "type": "object",
          "required": [
            "options",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "json"
              ]
            },
            "options": {
              "$ref": "#/definitions/JsonSourceOptions"
            }
          }
        }
      ]
    },
    "ParquetSourceOptions": {
      "type": "object",
      "properties": {
        "schema": {
          "description": "schema to read this Parquet with Schema definition using universal Field types",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          }
        }
      }
    },
    "Field": {
      "description": "A field definition that can be used across all aqueducts backends.\n\nFields define the structure of data with a name, data type, nullable flag, and optional description.\n\n# Examples\n\n``` use aqueducts_schemas::{Field, DataType}; use std::str::FromStr;\n\n// Simple field using direct construction let field = Field { name: \"user_id\".to_string(), data_type: DataType::Int64, nullable: false, description: Some(\"Unique user identifier\".to_string()), };\n\n// Field with complex type from string let list_field = Field { name: \"tags\".to_string(), data_type: DataType::from_str(\"list<string>\").unwrap(), nullable: true, description: None, }; ```",
      "type": "object",
      "required": [
        "data_type",
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the field",
          "type": "string"
        },
        "data_type": {
          "description": "Data type specification. Examples: 'string', 'int64', 'bool', 'list<string>', 'struct<name:string,age:int32>', 'timestamp<millisecond,UTC>', 'decimal<10,2>'",
          "type": "string"
        },
        "nullable": {
          "description": "Whether the field can contain null values",
          "default": true,
          "type": "boolean"
        },
        "description": {
          "description": "Optional description of what this field represents",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "CsvSourceOptions": {
      "type": "object",
      "properties": {
        "has_header": {
          "description": "set to `true` to treat first row of CSV as the header column names will be inferred from the header, if there is no header the column names are `column_1, column_2, ... column_x`",
          "default": true,
          "type": "boolean"
        },
        "delimiter": {
          "description": "set a delimiter character to read this CSV with",
          "default": ",",
          "type": "string",
          "maxLength": 1,
          "minLength": 1
        },
        "schema": {
          "description": "schema to read this CSV with Schema definition using universal Field types",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          }
        }
      }
    },
    "JsonSourceOptions": {
      "type": "object",
      "properties": {
        "schema": {
          "description": "schema to read this JSON with Schema definition using universal Field types",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          }
        }
      }
    },
    "Location": {
      "description": "A file path or URL. File paths will be converted to file:// URLs. Examples: '/tmp/data.csv', './data.csv', 'https://example.com/data.csv', 's3://bucket/data.csv'",
      "type": "string",
      "format": "uri"
    },
    "DataType": {
      "description": "Universal data type that can be converted to Arrow, Delta, and other formats.\n\nDataType supports all common data types and can be parsed from user-friendly string representations. This provides a unified schema definition that works across different backends.\n\nWhen used in YAML/JSON configurations, data types are specified as strings that are automatically parsed into the appropriate DataType variant.\n\n# String Format Examples\n\n## Basic Types - `\"string\"` or `\"utf8\"` - UTF-8 string - `\"int32\"`, `\"int\"`, or `\"integer\"` - 32-bit signed integer - `\"int64\"` or `\"long\"` - 64-bit signed integer - `\"float32\"` or `\"float\"` - 32-bit floating point - `\"float64\"` or `\"double\"` - 64-bit floating point - `\"bool\"` or `\"boolean\"` - Boolean value - `\"date32\"` or `\"date\"` - Date as days since epoch\n\n## Complex Types - `\"list<string>\"` - List of strings - `\"struct<name:string,age:int32>\"` - Struct with name and age fields - `\"decimal<10,2>\"` - Decimal with precision 10, scale 2 - `\"timestamp<millisecond,UTC>\"` - Timestamp with time unit and timezone - `\"map<string,int32>\"` - Map from string keys to int32 values\n\n# YAML Configuration Example ```yaml schema: - name: user_id data_type: int64 nullable: false - name: email data_type: string nullable: true - name: scores data_type: \"list<float64>\" nullable: true - name: profile data_type: \"struct<name:string,age:int32>\" nullable: true ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Boolean",
            "Int8",
            "Int16",
            "Int32",
            "Int64",
            "UInt8",
            "UInt16",
            "UInt32",
            "UInt64",
            "Float32",
            "Float64",
            "Utf8",
            "LargeUtf8",
            "Binary",
            "LargeBinary",
            "Date32",
            "Date64"
          ]
        },
        {
          "type": "object",
          "required": [
            "FixedSizeBinary"
          ],
          "properties": {
            "FixedSizeBinary": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Time32"
          ],
          "properties": {
            "Time32": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Time64"
          ],
          "properties": {
            "Time64": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Timestamp"
          ],
          "properties": {
            "Timestamp": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/TimeUnit"
                },
                {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Duration"
          ],
          "properties": {
            "Duration": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Interval"
          ],
          "properties": {
            "Interval": {
              "$ref": "#/definitions/IntervalUnit"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Decimal128"
          ],
          "properties": {
            "Decimal128": {
              "type": "array",
              "items": [
                {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                {
                  "type": "integer",
                  "format": "int8"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Decimal256"
          ],
          "properties": {
            "Decimal256": {
              "type": "array",
              "items": [
                {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                {
                  "type": "integer",
                  "format": "int8"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "List"
          ],
          "properties": {
            "List": {
              "$ref": "#/definitions/Field"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "LargeList"
          ],
          "properties": {
            "LargeList": {
              "$ref": "#/definitions/Field"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "FixedSizeList"
          ],
          "properties": {
            "FixedSizeList": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Field"
                },
                {
                  "type": "integer",
                  "format": "int32"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Struct"
          ],
          "properties": {
            "Struct": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Field"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Map"
          ],
          "properties": {
            "Map": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Field"
                },
                {
                  "$ref": "#/definitions/Field"
                },
                {
                  "type": "boolean"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Union"
          ],
          "properties": {
            "Union": {
              "type": "array",
              "items": [
                {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": [
                      {
                        "type": "integer",
                        "format": "int8"
                      },
                      {
                        "$ref": "#/definitions/Field"
                      }
                    ],
                    "maxItems": 2,
                    "minItems": 2
                  }
                },
                {
                  "$ref": "#/definitions/UnionMode"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Dictionary"
          ],
          "properties": {
            "Dictionary": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/DataType"
                },
                {
                  "$ref": "#/definitions/DataType"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TimeUnit": {
      "description": "Time unit for temporal types",
      "type": "string",
      "enum": [
        "second",
        "millisecond",
        "microsecond",
        "nanosecond"
      ]
    },
    "IntervalUnit": {
      "description": "Interval unit for interval types",
      "type": "string",
      "enum": [
        "year_month",
        "day_time",
        "month_day_nano"
      ]
    },
    "UnionMode": {
      "description": "Union mode",
      "type": "string",
      "enum": [
        "sparse",
        "dense"
      ]
    },
    "Stage": {
      "description": "A processing stage in an aqueducts pipeline.\n\nStages execute SQL queries against the available data sources and previous stage results. Each stage creates a named table that can be referenced by subsequent stages.\n\n# Examples\n\n``` use aqueducts_schemas::Stage;\n\n// Basic stage - debug fields default to false, show defaults to None let stage = Stage::builder() .name(\"aggregated_sales\".to_string()) .query(\"SELECT region, SUM(amount) as total FROM sales GROUP BY region\".to_string()) .build();\n\n// Stage with output shown let debug_stage = Stage::builder() .name(\"debug_query\".to_string()) .query(\"SELECT * FROM source LIMIT 5\".to_string()) .show(10) .build(); ```",
      "type": "object",
      "required": [
        "name",
        "query"
      ],
      "properties": {
        "name": {
          "description": "Name of the stage, used as the table name for the result of this stage",
          "type": "string"
        },
        "query": {
          "description": "SQL query that is executed against a datafusion context. Check the datafusion SQL reference for more information <https://datafusion.apache.org/user-guide/sql/index.html>",
          "type": "string"
        },
        "show": {
          "description": "When set to a value of up to `usize`, will print the result of this stage to the stdout limited by the number Set value to 0 to not limit the outputs",
          "default": null,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0.0
        },
        "explain": {
          "description": "When set to 'true' the stage will output the query execution plan",
          "default": false,
          "type": "boolean"
        },
        "explain_analyze": {
          "description": "When set to 'true' the stage will output the query execution plan with added execution metrics",
          "default": false,
          "type": "boolean"
        },
        "print_schema": {
          "description": "When set to 'true' the stage will pretty print the output schema of the executed query",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "Destination": {
      "description": "Target output destination for aqueducts pipelines.\n\nDestinations define where processed data is written and include various formats and storage systems with their specific configuration options.\n\n# Examples\n\n``` use aqueducts_schemas::{Destination, FileDestination, DestinationFileType}; use std::collections::HashMap;\n\n// Simple CSV destination - single_file, partition_columns, storage_config use defaults let csv_dest = Destination::File( FileDestination::builder() .name(\"output\".to_string()) .location(\"./output.csv\".try_into().unwrap()) .format(DestinationFileType::Csv(Default::default())) .build() ); ```",
      "oneOf": [
        {
          "description": "An in-memory destination",
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "in_memory"
              ]
            },
            "name": {
              "description": "Name to register the table with in the provided `SessionContext`",
              "type": "string"
            }
          }
        },
        {
          "description": "A file output destination",
          "type": "object",
          "required": [
            "format",
            "location",
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "file"
              ]
            },
            "name": {
              "description": "Name of the file to write",
              "type": "string"
            },
            "location": {
              "description": "Location of the file as a URL e.g. file:///tmp/output.csv, s3://bucket_name/prefix/output.parquet, s3:://bucket_name/prefix",
              "allOf": [
                {
                  "$ref": "#/definitions/Location"
                }
              ]
            },
            "format": {
              "description": "File format, supported types are Parquet and CSV",
              "allOf": [
                {
                  "$ref": "#/definitions/DestinationFileType"
                }
              ]
            },
            "single_file": {
              "description": "Describes whether to write a single file (can be used to overwrite destination file)",
              "default": true,
              "type": "boolean"
            },
            "partition_columns": {
              "description": "Columns to partition table by",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "storage_config": {
              "description": "Object store storage configuration",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        {
          "description": "An ODBC insert query to write to a DB table",
          "type": "object",
          "required": [
            "connection_string",
            "name",
            "type",
            "write_mode"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "odbc"
              ]
            },
            "name": {
              "description": "Name of the destination",
              "type": "string"
            },
            "connection_string": {
              "description": "ODBC connection string Please reference the respective database connection string syntax (e.g. <https://www.connectionstrings.com/postgresql-odbc-driver-psqlodbc/>)",
              "type": "string"
            },
            "write_mode": {
              "description": "Strategy for performing ODBC write operation",
              "allOf": [
                {
                  "$ref": "#/definitions/WriteMode"
                }
              ]
            },
            "batch_size": {
              "description": "Batch size for inserts (defaults to 1000)",
              "default": 1000,
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "A delta table destination",
          "type": "object",
          "required": [
            "location",
            "name",
            "type",
            "write_mode"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "delta"
              ]
            },
            "name": {
              "description": "Name of the destination",
              "type": "string"
            },
            "location": {
              "description": "A URL or Path to the location of the delta table Supports relative local paths",
              "allOf": [
                {
                  "$ref": "#/definitions/Location"
                }
              ]
            },
            "write_mode": {
              "description": "Write mode for the delta destination",
              "allOf": [
                {
                  "$ref": "#/definitions/DeltaWriteMode"
                }
              ]
            },
            "storage_config": {
              "description": "Storage configuration for the delta table Please reference the delta-rs github repo for more information on available keys (e.g. <https://github.com/delta-io/delta-rs/blob/main/crates/aws/src/storage.rs>) additionally also reference the `object_store` docs (e.g. <https://docs.rs/object_store/latest/object_store/aws/enum.AmazonS3ConfigKey.html>)",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "partition_columns": {
              "description": "Partition columns for the delta table",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "table_properties": {
              "description": "DeltaTable table properties: <https://docs.delta.io/latest/table-properties.html>",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "metadata": {
              "description": "Custom metadata to include with the table creation",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "schema": {
              "description": "Table schema definition using universal Field types",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/Field"
              }
            }
          }
        }
      ]
    },
    "DestinationFileType": {
      "description": "File type and options for destinations",
      "oneOf": [
        {
          "description": "Parquet options map, please refer to [TableParquetOptions](https://docs.rs/datafusion-common/latest/datafusion_common/config/struct.TableParquetOptions.html) for possible options",
          "type": "object",
          "required": [
            "options",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "parquet"
              ]
            },
            "options": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        {
          "description": "CSV options",
          "type": "object",
          "required": [
            "options",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "csv"
              ]
            },
            "options": {
              "$ref": "#/definitions/CsvDestinationOptions"
            }
          }
        },
        {
          "description": "Json destination, no supported options",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "json"
              ]
            }
          }
        }
      ]
    },
    "CsvDestinationOptions": {
      "description": "CSV destination options",
      "type": "object",
      "properties": {
        "has_header": {
          "description": "Set to `true` to include headers in CSV",
          "default": true,
          "type": "boolean"
        },
        "delimiter": {
          "description": "Set delimiter character to write CSV with",
          "default": ",",
          "type": "string",
          "maxLength": 1,
          "minLength": 1
        },
        "compression": {
          "description": "Compression type for CSV output",
          "default": null,
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "WriteMode": {
      "description": "Write modes for the `Destination` output.",
      "oneOf": [
        {
          "description": "`Append`: appends data to the `Destination`",
          "type": "object",
          "required": [
            "operation"
          ],
          "properties": {
            "operation": {
              "type": "string",
              "enum": [
                "append"
              ]
            }
          }
        },
        {
          "description": "`Custom`: Inserts data with a prepared stament. Option to perform any number of (non-insert) preliminary statements",
          "type": "object",
          "required": [
            "operation",
            "transaction"
          ],
          "properties": {
            "operation": {
              "type": "string",
              "enum": [
                "custom"
              ]
            },
            "transaction": {
              "$ref": "#/definitions/CustomStatements"
            }
          }
        }
      ]
    },
    "CustomStatements": {
      "description": "SQL statements for `Custom` write mode.",
      "type": "object",
      "required": [
        "insert"
      ],
      "properties": {
        "pre_insert": {
          "description": "Optional (non-insert) preliminary statement",
          "type": [
            "string",
            "null"
          ]
        },
        "insert": {
          "description": "Insert prepared statement",
          "type": "string"
        }
      }
    },
    "DeltaWriteMode": {
      "description": "Write mode for delta destinations",
      "oneOf": [
        {
          "description": "Append data to the destination table",
          "type": "object",
          "required": [
            "operation"
          ],
          "properties": {
            "operation": {
              "type": "string",
              "enum": [
                "append"
              ]
            }
          }
        },
        {
          "description": "Upsert data using the specified merge columns for uniqueness",
          "type": "object",
          "required": [
            "operation",
            "params"
          ],
          "properties": {
            "operation": {
              "type": "string",
              "enum": [
                "upsert"
              ]
            },
            "params": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        {
          "description": "Replace data matching the specified conditions",
          "type": "object",
          "required": [
            "operation",
            "params"
          ],
          "properties": {
            "operation": {
              "type": "string",
              "enum": [
                "replace"
              ]
            },
            "params": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplaceCondition"
              }
            }
          }
        }
      ]
    },
    "ReplaceCondition": {
      "description": "Condition used to build a predicate for data replacement.",
      "type": "object",
      "required": [
        "column",
        "value"
      ],
      "properties": {
        "column": {
          "description": "Column name to match against",
          "type": "string"
        },
        "value": {
          "description": "Value to match for replacement",
          "type": "string"
        }
      }
    }
  }
}