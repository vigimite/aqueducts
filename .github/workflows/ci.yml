name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all --check

  # Run lints
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup build environment
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  # Check that documentation builds
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup build environment
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev

      - name: Check documentation
        run: cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run security audit
        run: cargo audit

  # License and dependency check
  licenses:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Check licenses and dependencies
        run: cargo deny check

  # Run tests
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Only test beta on Ubuntu to save CI time
          - os: macos-latest
            rust: beta

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Setup build environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client unixodbc-dev odbc-postgresql

      - name: Setup build environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install postgresql unixodbc

      - name: Setup test database (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          export CONTAINER_ID=$(docker ps --filter "name=postgres" --format "{{.ID}}")
          docker cp ./examples/temp_readings_jan_2024.csv $CONTAINER_ID:/opt/
          docker cp ./examples/temp_readings_feb_2024.csv $CONTAINER_ID:/opt/
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -f ./db/init.sql

      - name: Run tests
        run: cargo test --workspace --all-features
        env:
          # Skip ODBC tests on macOS as they're flaky in CI
          RUST_TEST_THREADS: 1

  # MSRV (Minimum Supported Rust Version) check
  msrv:
    name: MSRV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          # Update this to match your actual MSRV
          toolchain: 1.75.0

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup build environment
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev

      - name: Check MSRV compatibility
        run: cargo check --workspace --all-features

  # Build check for different feature combinations
  features:
    name: Feature Combinations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup build environment
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev

      - name: Check no default features
        run: cargo check --workspace --no-default-features

      - name: Check minimal features
        run: cargo check -p aqueducts-cli --no-default-features --features yaml

      - name: Check ODBC features
        run: cargo check --workspace --features odbc

      - name: Check all features
        run: cargo check --workspace --all-features